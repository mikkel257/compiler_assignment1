import org.antlr.v4.runtime.tree.ParseTreeVisitor;
import org.antlr.v4.runtime.*;
import org.antlr.v4.runtime.tree.*;
import org.antlr.v4.runtime.CharStreams;
import java.io.IOException;

public class main {
	public static void main(String[] args) throws IOException {

		// we expect exactly one argument: the name of the input file
		if (args.length != 1) {
			System.err.println("\n");
			System.err.println("Simple calculator\n");
			System.err.println("=================\n\n");
			System.err.println("Please give as input argument a filename\n");
			System.exit(-1);
		}
		String filename = args[0];

		// open the input file
		CharStream input = CharStreams.fromFileName(filename);
		// new ANTLRFileStream (filename); // depricated

		// create a lexer/scanner
		simpleCalcLexer lex = new simpleCalcLexer(input);

		// get the stream of tokens from the scanner
		CommonTokenStream tokens = new CommonTokenStream(lex);

		// create a parser
		simpleCalcParser parser = new simpleCalcParser(tokens);

		// and parse anything from the grammar for "start"
		ParseTree parseTree = parser.start();

		// Construct an interpreter and run it on the parse tree
		Interpreter interpreter = new Interpreter();
		Double result = interpreter.visit(parseTree);

		System.out.println("The result is: " + result);
	}
}

// We write an interpreter that implements interface
// "simpleCalcVisitor<T>" that is automatically generated by ANTLR
// This is parameterized over a return type "<T>" which is in our case
// simply a Double.

class Interpreter extends AbstractParseTreeVisitor<Double> implements simpleCalcVisitor<Double> {

	public static Environment env = new Environment();

	public Double visitStart(simpleCalcParser.StartContext ctx) {
		for (simpleCalcParser.AssignmentContext c : ctx.assignment()) {
			visitAssignment(c);
		}
		return visit(ctx.expr());
	};

	public Double visitAssignment(simpleCalcParser.AssignmentContext ctx) {
		Double result = visit(ctx.expr());
		env.setVariable(ctx.ID().getText(), result);
		return result;
	};

	public Double visitParenthesis(simpleCalcParser.ParenthesisContext ctx) {
		return visit(ctx.expr());
	};

	public Double visitVariable(simpleCalcParser.VariableContext ctx) {
		return env.getVariable(ctx.getText());
	};

	public Double visitAddition(simpleCalcParser.AdditionContext ctx) {
		return visit(ctx.expr(0)) + visit(ctx.expr(1));
	};

	public Double visitMultiplication(simpleCalcParser.MultiplicationContext ctx) {
		if (ctx.op.getText().equals("*"))
			return visit(ctx.expr(0)) * visit(ctx.expr(1));
		else
			return visit(ctx.expr(0)) / visit(ctx.expr(1));

	};

	public Double visitConstant(simpleCalcParser.ConstantContext ctx) {
		return Double.parseDouble(ctx.getText());
	};
}
